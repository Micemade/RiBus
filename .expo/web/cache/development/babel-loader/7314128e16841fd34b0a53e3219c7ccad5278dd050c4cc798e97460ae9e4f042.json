{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar API_BASE_URL = 'https://api.autotrolej.hr/api/open/v1/voznired';\nvar busService = {\n  getLiveBuses: function () {\n    var _getLiveBuses = _asyncToGenerator(function* () {\n      try {\n        console.log('BusService: Starting getLiveBuses...');\n        var _yield$Promise$all = yield Promise.all([fetch(`${API_BASE_URL}/linije`), fetch(`${API_BASE_URL}/autobusi`), fetch(`${API_BASE_URL}/polasci`)]),\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3),\n          linesResponse = _yield$Promise$all2[0],\n          busesResponse = _yield$Promise$all2[1],\n          departuresResponse = _yield$Promise$all2[2];\n        console.log('BusService: API responses received');\n        console.log('Lines response status:', linesResponse.status);\n        console.log('Buses response status:', busesResponse.status);\n        console.log('Departures response status:', departuresResponse.status);\n        var linesData = yield linesResponse.json();\n        var busesData = yield busesResponse.json();\n        var departuresData = yield departuresResponse.json();\n        console.log('BusService: Data parsed');\n        console.log('Lines data msg:', linesData.msg);\n        console.log('Buses data msg:', busesData.msg);\n        console.log('Departures data msg:', departuresData.msg);\n        console.log('Number of buses from API:', busesData.res ? busesData.res.length : 0);\n        if (linesData.msg !== 'ok' || busesData.msg !== 'ok') {\n          console.error('API response not OK:', {\n            linesData: linesData.msg,\n            busesData: busesData.msg\n          });\n          throw new Error('API response not OK');\n        }\n        var linesMap = new Map();\n        Object.values(linesData.res).forEach(function (line) {\n          linesMap.set(line.id, line);\n        });\n        console.log('BusService: Lines map created with', linesMap.size, 'lines');\n        var tripDepartures = new Map();\n        if (departuresData.msg === 'ok' && departuresData.res) {\n          console.log('BusService: Departures data type:', typeof departuresData.res);\n          console.log('BusService: Departures data is array:', Array.isArray(departuresData.res));\n          console.log('BusService: Departures data structure:', Object.keys(departuresData.res));\n          var departuresArray = Array.isArray(departuresData.res) ? departuresData.res : Object.values(departuresData.res);\n          console.log('BusService: Processing', departuresArray.length, 'departures');\n          departuresArray.forEach(function (departure) {\n            if (departure.voznjaId && departure.stanica && departure.polazak) {\n              var tripId = departure.voznjaId;\n              if (!tripDepartures.has(tripId)) {\n                tripDepartures.set(tripId, []);\n              }\n              tripDepartures.get(tripId).push({\n                stationName: departure.stanica.nazivKratki || departure.stanica.naziv,\n                departureTime: departure.polazak,\n                arrivalTime: departure.dolazak\n              });\n            }\n          });\n        }\n        console.log('BusService: Trip departures map created with', tripDepartures.size, 'trips');\n        tripDepartures.forEach(function (departures, tripId) {\n          departures.sort(function (a, b) {\n            return new Date(a.departureTime) - new Date(b.departureTime);\n          });\n        });\n        var busMap = new Map();\n        console.log('BusService: Processing', busesData.res.length, 'buses');\n        busesData.res.forEach(function (bus, index) {\n          var busKey = `${bus.gbr}-${bus.voznjaId}`;\n          if (!busMap.has(busKey)) {\n            var allLines = Array.from(linesMap.values());\n            var busHash = bus.gbr * 31 + bus.voznjaId % 1000;\n            var lineIndex = Math.abs(busHash) % allLines.length;\n            var line = allLines[lineIndex] || {\n              brojLinije: 'Unknown',\n              naziv: 'Unknown Route'\n            };\n            if (index < 3) {\n              console.log(`BusService: Processing bus ${index}:`, {\n                busKey: busKey,\n                busNumber: bus.gbr,\n                tripId: bus.voznjaId,\n                lineNumber: line.brojLinije,\n                lat: bus.lat,\n                lon: bus.lon\n              });\n            }\n            var tripDeps = tripDepartures.get(bus.voznjaId) || [];\n            var now = new Date();\n            var nextDeparture = tripDeps.find(function (dep) {\n              return new Date(dep.departureTime) > now;\n            });\n            var arrivalTime = 'Live';\n            var nextStopName = 'En route';\n            if (nextDeparture) {\n              nextStopName = nextDeparture.stationName;\n              var departureTime = new Date(nextDeparture.departureTime);\n              var timeDiff = Math.round((departureTime - now) / (1000 * 60));\n              if (timeDiff > 0 && timeDiff < 60) {\n                arrivalTime = `${timeDiff} min`;\n              } else if (timeDiff <= 0) {\n                arrivalTime = 'Now';\n              } else {\n                arrivalTime = departureTime.toLocaleTimeString('hr-HR', {\n                  hour: '2-digit',\n                  minute: '2-digit'\n                });\n              }\n            }\n            busMap.set(busKey, {\n              id: bus.voznjaBusId || bus.gbr,\n              lineNumber: line.brojLinije,\n              route: line.naziv,\n              destination: line.naziv.split(' - ')[1] || line.naziv,\n              direction: line.smjerId,\n              directionName: line.smjerNaziv || '',\n              status: 'Live',\n              nextStop: nextStopName,\n              arrivalTime: arrivalTime,\n              latitude: bus.lat,\n              longitude: bus.lon,\n              busNumber: bus.gbr,\n              tripId: bus.voznjaId\n            });\n          }\n        });\n        var liveBuses = Array.from(busMap.values());\n        console.log('BusService: Final live buses count:', liveBuses.length);\n        console.log('BusService: Sample bus data:', liveBuses[0]);\n        return liveBuses;\n      } catch (error) {\n        console.error('Error fetching live buses:', error);\n        console.error('Error details:', error.message);\n        console.error('Error stack:', error.stack);\n        return [];\n      }\n    });\n    function getLiveBuses() {\n      return _getLiveBuses.apply(this, arguments);\n    }\n    return getLiveBuses;\n  }(),\n  getBusSchedule: function () {\n    var _getBusSchedule = _asyncToGenerator(function* (lineNumber) {\n      try {\n        console.log('🚌 BusService: Getting schedule for line:', lineNumber);\n        console.log('🚌 BusService: Making API calls to /linije and /polasci endpoints');\n        var _yield$Promise$all3 = yield Promise.all([fetch(`${API_BASE_URL}/linije`), fetch(`${API_BASE_URL}/polasci`)]),\n          _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2),\n          linesResponse = _yield$Promise$all4[0],\n          departuresResponse = _yield$Promise$all4[1];\n        var linesData = yield linesResponse.json();\n        var departuresData = yield departuresResponse.json();\n        console.log('BusService: Schedule API response status:', departuresResponse.status);\n        console.log('BusService: Schedule data msg:', departuresData.msg);\n        console.log('BusService: Lines data msg:', linesData.msg);\n        if (departuresData.msg !== 'ok' || linesData.msg !== 'ok') {\n          throw new Error('API response not OK');\n        }\n        var lineNumberToIds = new Map();\n        Object.values(linesData.res).forEach(function (line) {\n          if (!lineNumberToIds.has(line.brojLinije)) {\n            lineNumberToIds.set(line.brojLinije, []);\n          }\n          lineNumberToIds.get(line.brojLinije).push(line.id);\n        });\n        var targetLineIds = lineNumberToIds.get(lineNumber) || [];\n        console.log('BusService: Available line numbers:', Array.from(lineNumberToIds.keys()).slice(0, 10));\n        console.log('BusService: Target line IDs for line', lineNumber, ':', targetLineIds);\n        var departuresArray;\n        if (Array.isArray(departuresData.res)) {\n          departuresArray = departuresData.res;\n        } else {\n          departuresArray = Object.keys(departuresData.res).map(function (key) {\n            var departure = departuresData.res[key];\n            return _objectSpread(_objectSpread({}, departure), {}, {\n              departureKey: key\n            });\n          });\n        }\n        console.log('BusService: Total departures available:', departuresArray.length);\n        console.log('BusService: Sample departure structure:', JSON.stringify(departuresArray[0], null, 2));\n        console.log('BusService: Sample departure line IDs:', departuresArray.slice(0, 5).map(function (d) {\n          return d.linijaId;\n        }));\n        console.log('BusService: Sample departure keys:', Object.keys(departuresData.res).slice(0, 5));\n        var filteredDepartures = [];\n        if (targetLineIds.length > 0) {\n          filteredDepartures = departuresArray.filter(function (departure) {\n            return targetLineIds.includes(departure.linijaId);\n          });\n          console.log('BusService: Exact line ID match found:', filteredDepartures.length, 'departures');\n        }\n        if (filteredDepartures.length === 0) {\n          filteredDepartures = departuresArray.filter(function (departure) {\n            if (!departure.departureKey) return false;\n            return targetLineIds.some(function (lineId) {\n              return departure.departureKey.startsWith(lineId.toString());\n            });\n          });\n          console.log('BusService: Departure key match found:', filteredDepartures.length, 'departures');\n        }\n        if (filteredDepartures.length === 0) {\n          filteredDepartures = departuresArray.filter(function (departure) {\n            return departure.departureKey && departure.departureKey.includes(lineNumber);\n          });\n          console.log('BusService: Partial departure key match found:', filteredDepartures.length, 'departures');\n        }\n        if (filteredDepartures.length === 0) {\n          filteredDepartures = departuresArray.filter(function (departure) {\n            return departure.uniqueLinijaId && departure.uniqueLinijaId.includes(lineNumber);\n          });\n          console.log('BusService: Partial uniqueLinijaId match found:', filteredDepartures.length, 'departures');\n        }\n        if (filteredDepartures.length === 0) {\n          filteredDepartures = departuresArray.filter(function (departure) {\n            var departureLine = departure.linija || departure.linijaId;\n            return departureLine && departureLine.toString().includes(lineNumber);\n          });\n          console.log('BusService: General line reference match found:', filteredDepartures.length, 'departures');\n        }\n        if (filteredDepartures.length === 0) {\n          console.log('BusService: No matches found. Taking first 10 departures for debugging...');\n          filteredDepartures = departuresArray.slice(0, 10);\n        }\n        filteredDepartures.sort(function (a, b) {\n          var timeA = a.polazak || '';\n          var timeB = b.polazak || '';\n          return timeA.localeCompare(timeB);\n        });\n        var rideGroups = new Map();\n        var allDepartures = [];\n        filteredDepartures.forEach(function (departureGroup) {\n          if (departureGroup.polazakList && Array.isArray(departureGroup.polazakList)) {\n            departureGroup.polazakList.forEach(function (departure) {\n              var rideId = departure.voznjaId;\n              var busId = departure.voznjaBusId;\n              if (!rideGroups.has(rideId)) {\n                rideGroups.set(rideId, {\n                  rideId: rideId,\n                  busId: busId,\n                  lineNumber: lineNumber,\n                  departures: []\n                });\n              }\n              rideGroups.get(rideId).departures.push(departure);\n              allDepartures.push(_objectSpread(_objectSpread({}, departure), {}, {\n                rideId: rideId,\n                busId: busId\n              }));\n            });\n          }\n        });\n        console.log('BusService: Found', rideGroups.size, 'different rides for line', lineNumber);\n        console.log('BusService: Ride IDs:', Array.from(rideGroups.keys()).slice(0, 10));\n        console.log('BusService: Extracted', allDepartures.length, 'individual departures from', filteredDepartures.length, 'departure groups');\n        allDepartures.sort(function (a, b) {\n          var timeA = a.polazak || '';\n          var timeB = b.polazak || '';\n          return timeA.localeCompare(timeB);\n        });\n        var scheduleData = allDepartures.slice(0, 50).map(function (departure, index) {\n          if (allDepartures.length > 0 && index < 3) {\n            var _departure$stanica;\n            console.log(`BusService: Individual departure ${index} for line ${lineNumber}:`, {\n              polazak: departure.polazak,\n              dolazak: departure.dolazak,\n              stanica: (_departure$stanica = departure.stanica) == null ? void 0 : _departure$stanica.naziv,\n              linijaId: departure.linijaId,\n              uniqueLinijaId: departure.uniqueLinijaId,\n              stanicaId: departure.stanicaId\n            });\n          }\n          var departureTime = 'N/A';\n          if (departure.polazak) {\n            var timeMatch = departure.polazak.match(/T(\\d{2}:\\d{2})/);\n            if (timeMatch) {\n              departureTime = timeMatch[1];\n            }\n          }\n          var arrivalTime = null;\n          if (departure.dolazak) {\n            var _timeMatch = departure.dolazak.match(/T(\\d{2}:\\d{2})/);\n            if (_timeMatch) {\n              arrivalTime = _timeMatch[1];\n            }\n          }\n          var stationName = 'Unknown Stop';\n          var stationDescription = '';\n          if (departure.stanica) {\n            var rawName = departure.stanica.naziv || 'Unknown Stop';\n            stationName = rawName.toString().replace(/\\s+/g, ' ').trim();\n            var rawDescription = departure.stanica.nazivKratki || departure.stanica.naziv || '';\n            stationDescription = rawDescription.toString().replace(/\\s+/g, ' ').trim();\n            if (allDepartures.length > 0 && index < 3) {\n              console.log(`Station ${index} for line ${lineNumber} - Raw:`, departure.stanica.naziv, '-> Cleaned:', stationName);\n            }\n          }\n          return {\n            id: departure.voznjaStanicaId || departure.stanicaId || `dep-${index}`,\n            time: departureTime,\n            stop: stationName,\n            description: stationDescription,\n            arrival: arrivalTime,\n            stationId: departure.stanicaId,\n            tripId: departure.voznjaId,\n            rideId: departure.rideId,\n            busId: departure.busId,\n            lineId: departure.linijaId,\n            uniqueLineId: departure.uniqueLinijaId,\n            coordinates: departure.stanica ? {\n              lat: departure.stanica.gpsY,\n              lng: departure.stanica.gpsX\n            } : null\n          };\n        });\n        console.log('BusService: Total processed schedules before time filtering:', scheduleData.length);\n        console.log('BusService: Sample schedule times (all):', scheduleData.slice(0, 10).map(function (s) {\n          return `${s.time} - ${s.stop}`;\n        }));\n        var now = new Date();\n        var currentTime = now.getHours() * 60 + now.getMinutes();\n        var futureSchedules = scheduleData.filter(function (schedule) {\n          if (schedule.time === 'N/A') return true;\n          var timeMatch = schedule.time.match(/(\\d{1,2}):(\\d{2})/);\n          if (!timeMatch) return true;\n          var _timeMatch2 = _slicedToArray(timeMatch, 3),\n            hours = _timeMatch2[1],\n            minutes = _timeMatch2[2];\n          var scheduleTime = parseInt(hours) * 60 + parseInt(minutes);\n          return true;\n        });\n        if (futureSchedules.length === 0) {\n          console.log('BusService: No future schedules found, returning all processed schedules for debugging');\n          futureSchedules = scheduleData;\n        }\n        console.log('BusService: Returning', futureSchedules.length, 'schedule entries for line', lineNumber);\n        if (futureSchedules.length > 0) {\n          console.log('BusService: Sample schedule entry:', futureSchedules[0]);\n          console.log('BusService: Sample schedule times:', futureSchedules.slice(0, 5).map(function (s) {\n            return `${s.time} - ${s.stop}`;\n          }));\n          console.log('BusService: Schedule stops for line', lineNumber, ':', futureSchedules.slice(0, 10).map(function (s) {\n            return s.stop;\n          }));\n        } else {\n          console.log('BusService: No schedule data found, returning mock data for debugging');\n          return [{\n            id: 'mock-1',\n            time: '14:30',\n            stop: 'Test Station 1',\n            description: 'Mock departure 1',\n            arrival: null,\n            stationId: 'mock-station-1',\n            tripId: 'mock-trip-1',\n            lineId: lineNumber,\n            uniqueLineId: `mock-${lineNumber}`,\n            coordinates: null\n          }, {\n            id: 'mock-2',\n            time: '15:00',\n            stop: 'Test Station 2',\n            description: 'Mock departure 2',\n            arrival: null,\n            stationId: 'mock-station-2',\n            tripId: 'mock-trip-2',\n            lineId: lineNumber,\n            uniqueLineId: `mock-${lineNumber}`,\n            coordinates: null\n          }];\n        }\n        return futureSchedules;\n      } catch (error) {\n        console.error('Error fetching bus schedule:', error);\n        console.error('Error details:', error.message);\n        return [];\n      }\n    });\n    function getBusSchedule(_x) {\n      return _getBusSchedule.apply(this, arguments);\n    }\n    return getBusSchedule;\n  }(),\n  getBusScheduleByRides: function () {\n    var _getBusScheduleByRides = _asyncToGenerator(function* (lineNumber) {\n      try {\n        console.log('🚌 BusService: Getting schedule by rides for line:', lineNumber);\n        var _yield$Promise$all5 = yield Promise.all([fetch(`${API_BASE_URL}/linije`), fetch(`${API_BASE_URL}/polasci`)]),\n          _yield$Promise$all6 = _slicedToArray(_yield$Promise$all5, 2),\n          linesResponse = _yield$Promise$all6[0],\n          departuresResponse = _yield$Promise$all6[1];\n        var linesData = yield linesResponse.json();\n        var departuresData = yield departuresResponse.json();\n        if (departuresData.msg !== 'ok' || linesData.msg !== 'ok') {\n          throw new Error('API response not OK');\n        }\n        var lineNumberToIds = new Map();\n        Object.values(linesData.res).forEach(function (line) {\n          if (!lineNumberToIds.has(line.brojLinije)) {\n            lineNumberToIds.set(line.brojLinije, []);\n          }\n          lineNumberToIds.get(line.brojLinije).push(line.id);\n        });\n        var targetLineIds = lineNumberToIds.get(lineNumber) || [];\n        console.log('BusService (Rides): Target line IDs for line', lineNumber, ':', targetLineIds);\n        var departuresArray;\n        if (Array.isArray(departuresData.res)) {\n          departuresArray = departuresData.res;\n        } else {\n          departuresArray = Object.keys(departuresData.res).map(function (key) {\n            return _objectSpread(_objectSpread({}, departuresData.res[key]), {}, {\n              departureKey: key\n            });\n          });\n        }\n        var filteredDepartures = [];\n        if (targetLineIds.length > 0) {\n          filteredDepartures = departuresArray.filter(function (departure) {\n            return targetLineIds.includes(departure.linijaId);\n          });\n          console.log('BusService (Rides): Exact line ID match found:', filteredDepartures.length, 'departure groups');\n        }\n        if (filteredDepartures.length === 0) {\n          filteredDepartures = departuresArray.filter(function (departure) {\n            if (!departure.departureKey) return false;\n            return targetLineIds.some(function (lineId) {\n              return departure.departureKey.startsWith(lineId.toString() + '-');\n            });\n          });\n          console.log('BusService (Rides): Departure key prefix match found:', filteredDepartures.length, 'departure groups');\n        }\n        if (filteredDepartures.length === 0) {\n          console.log('BusService (Rides): No direct matches found. Searching within polazakList data...');\n          filteredDepartures = departuresArray.filter(function (departureGroup) {\n            if (!departureGroup.polazakList || !Array.isArray(departureGroup.polazakList)) {\n              return false;\n            }\n            return departureGroup.polazakList.some(function (polazak) {\n              return targetLineIds.includes(polazak.linijaId);\n            });\n          });\n          console.log('BusService (Rides): PolazakList filtering found:', filteredDepartures.length, 'departure groups');\n        }\n        var strictFilteredDepartures = filteredDepartures.map(function (departureGroup) {\n          var filteredPolazakList = departureGroup.polazakList ? departureGroup.polazakList.filter(function (polazak) {\n            return targetLineIds.includes(polazak.linijaId);\n          }) : [];\n          return _objectSpread(_objectSpread({}, departureGroup), {}, {\n            polazakList: filteredPolazakList\n          });\n        }).filter(function (group) {\n          return group.polazakList.length > 0;\n        });\n        console.log('BusService (Rides): Final filtered departure groups:', strictFilteredDepartures.length, 'for line', lineNumber);\n        var rideGroups = new Map();\n        strictFilteredDepartures.forEach(function (departureGroup) {\n          if (departureGroup.polazakList && Array.isArray(departureGroup.polazakList)) {\n            console.log('BusService (Rides): Processing polazakList with', departureGroup.polazakList.length, 'departures for line', lineNumber);\n            var lineIds = _toConsumableArray(new Set(departureGroup.polazakList.map(function (p) {\n              return p.linijaId;\n            })));\n            console.log('BusService (Rides): Line IDs in this group:', lineIds, 'Target IDs:', targetLineIds);\n            departureGroup.polazakList.forEach(function (polazak, index) {\n              var rideId = polazak.voznjaId;\n              var busId = polazak.voznjaBusId;\n              var polazakLineId = polazak.linijaId;\n              if (!rideId) {\n                console.warn('BusService (Rides): Missing voznjaId for polazak', index);\n                return;\n              }\n              if (!targetLineIds.includes(polazakLineId)) {\n                console.warn('BusService (Rides): Skipping polazak from different line. Expected:', targetLineIds, 'Got:', polazakLineId);\n                return;\n              }\n              if (!rideGroups.has(rideId)) {\n                rideGroups.set(rideId, {\n                  rideId: rideId,\n                  busId: busId,\n                  lineNumber: lineNumber,\n                  lineId: polazakLineId,\n                  departures: [],\n                  stations: []\n                });\n              }\n              var ride = rideGroups.get(rideId);\n              var departureTime = 'N/A';\n              if (polazak.polazak) {\n                var timeMatch = polazak.polazak.match(/T(\\d{2}:\\d{2})/);\n                if (timeMatch) {\n                  departureTime = timeMatch[1];\n                }\n              }\n              var stationName = 'Unknown Stop';\n              if (polazak.stanica && polazak.stanica.naziv) {\n                stationName = polazak.stanica.naziv.toString().replace(/\\s+/g, ' ').trim();\n              }\n              var departure = {\n                id: polazak.voznjaStanicaId || `${rideId}-${ride.departures.length}`,\n                time: departureTime,\n                stop: stationName,\n                stationId: polazak.stanicaId,\n                coordinates: polazak.stanica ? {\n                  lat: polazak.stanica.gpsY,\n                  lng: polazak.stanica.gpsX\n                } : null,\n                rideId: rideId,\n                busId: busId\n              };\n              ride.departures.push(departure);\n              ride.stations.push(stationName);\n            });\n          }\n        });\n        var rides = Array.from(rideGroups.values()).map(function (ride) {\n          ride.departures.sort(function (a, b) {\n            if (a.time === 'N/A') return 1;\n            if (b.time === 'N/A') return -1;\n            return a.time.localeCompare(b.time);\n          });\n          var firstDeparture = ride.departures.length > 0 ? ride.departures[0].time : 'N/A';\n          var lastDeparture = ride.departures.length > 0 ? ride.departures[ride.departures.length - 1].time : 'N/A';\n          var stationCount = ride.departures.length;\n          return {\n            rideId: ride.rideId,\n            busId: ride.busId,\n            lineNumber: ride.lineNumber,\n            lineId: ride.lineId,\n            firstDeparture: firstDeparture,\n            lastDeparture: lastDeparture,\n            stationCount: stationCount,\n            departures: ride.departures,\n            title: `${firstDeparture} - ${lastDeparture} (${stationCount} stops)`\n          };\n        });\n        rides.sort(function (a, b) {\n          if (a.firstDeparture === 'N/A') return 1;\n          if (b.firstDeparture === 'N/A') return -1;\n          return a.firstDeparture.localeCompare(b.firstDeparture);\n        });\n        console.log('BusService (Rides): Processed', rides.length, 'rides for line', lineNumber);\n        var lineVerification = rides.map(function (ride) {\n          return {\n            rideId: ride.rideId,\n            lineId: ride.lineId,\n            isCorrectLine: targetLineIds.includes(ride.lineId)\n          };\n        });\n        console.log('BusService (Rides): Line verification:', lineVerification);\n        var verifiedRides = rides.filter(function (ride) {\n          return targetLineIds.includes(ride.lineId);\n        });\n        if (verifiedRides.length !== rides.length) {\n          console.warn('BusService (Rides): Filtered out', rides.length - verifiedRides.length, 'rides from wrong lines');\n        }\n        if (verifiedRides.length > 0) {\n          console.log('BusService (Rides): First verified ride:', {\n            rideId: verifiedRides[0].rideId,\n            lineId: verifiedRides[0].lineId,\n            title: verifiedRides[0].title,\n            departureCount: verifiedRides[0].departures.length,\n            sampleStops: verifiedRides[0].departures.slice(0, 3).map(function (d) {\n              return `${d.time} - ${d.stop}`;\n            })\n          });\n        }\n        return verifiedRides;\n      } catch (error) {\n        console.error('Error fetching bus schedule by rides:', error);\n        return [];\n      }\n    });\n    function getBusScheduleByRides(_x2) {\n      return _getBusScheduleByRides.apply(this, arguments);\n    }\n    return getBusScheduleByRides;\n  }(),\n  analyzeAPIStructure: function () {\n    var _analyzeAPIStructure = _asyncToGenerator(function* () {\n      try {\n        var _sampleDeparture$pola, _sampleDeparture$pola2;\n        console.log('🔍 BusService: Analyzing API structure...');\n        var _yield$Promise$all7 = yield Promise.all([fetch(`${API_BASE_URL}/linije`), fetch(`${API_BASE_URL}/autobusi`), fetch(`${API_BASE_URL}/polasci`)]),\n          _yield$Promise$all8 = _slicedToArray(_yield$Promise$all7, 3),\n          linesResponse = _yield$Promise$all8[0],\n          busesResponse = _yield$Promise$all8[1],\n          departuresResponse = _yield$Promise$all8[2];\n        var linesData = yield linesResponse.json();\n        var busesData = yield busesResponse.json();\n        var departuresData = yield departuresResponse.json();\n        console.log('📊 API Structure Analysis:');\n        console.log('='.repeat(50));\n        console.log('🚍 LINES (/linije):');\n        console.log('- Total lines:', Object.keys(linesData.res).length);\n        var sampleLine = Object.values(linesData.res)[0];\n        console.log('- Sample line structure:', {\n          id: sampleLine.id,\n          brojLinije: sampleLine.brojLinije,\n          naziv: sampleLine.naziv,\n          smjerId: sampleLine.smjerId,\n          smjerNaziv: sampleLine.smjerNaziv\n        });\n        console.log('\\n🚌 BUSES (/autobusi):');\n        console.log('- Total buses:', busesData.res.length);\n        var sampleBus = busesData.res[0];\n        console.log('- Sample bus structure:', {\n          gbr: sampleBus.gbr,\n          voznjaId: sampleBus.voznjaId,\n          lat: sampleBus.lat,\n          lon: sampleBus.lon\n        });\n        console.log('\\n🕐 DEPARTURES (/polasci):');\n        console.log('- Total departure groups:', Object.keys(departuresData.res).length);\n        var sampleKey = Object.keys(departuresData.res)[0];\n        var sampleDeparture = departuresData.res[sampleKey];\n        console.log('- Sample departure key:', sampleKey);\n        console.log('- Sample departure structure:', {\n          id: sampleDeparture.id,\n          brojLinije: sampleDeparture.brojLinije,\n          naziv: sampleDeparture.naziv,\n          polazakListLength: ((_sampleDeparture$pola = sampleDeparture.polazakList) == null ? void 0 : _sampleDeparture$pola.length) || 0\n        });\n        if (((_sampleDeparture$pola2 = sampleDeparture.polazakList) == null ? void 0 : _sampleDeparture$pola2.length) > 0) {\n          var _samplePolazak$stanic;\n          var samplePolazak = sampleDeparture.polazakList[0];\n          console.log('- Sample polazak structure:', {\n            voznjaId: samplePolazak.voznjaId,\n            voznjaBusId: samplePolazak.voznjaBusId,\n            stanicaId: samplePolazak.stanicaId,\n            polazak: samplePolazak.polazak,\n            stationName: (_samplePolazak$stanic = samplePolazak.stanica) == null ? void 0 : _samplePolazak$stanic.naziv\n          });\n        }\n        console.log('='.repeat(50));\n        return {\n          lines: Object.keys(linesData.res).length,\n          buses: busesData.res.length,\n          departureGroups: Object.keys(departuresData.res).length,\n          sampleStructures: {\n            line: sampleLine,\n            bus: sampleBus,\n            departure: sampleDeparture\n          }\n        };\n      } catch (error) {\n        console.error('Error analyzing API structure:', error);\n        return null;\n      }\n    });\n    function analyzeAPIStructure() {\n      return _analyzeAPIStructure.apply(this, arguments);\n    }\n    return analyzeAPIStructure;\n  }(),\n  getBusLocation: function () {\n    var _getBusLocation = _asyncToGenerator(function* (lineNumber) {\n      try {\n        var liveBuses = yield busService.getLiveBuses();\n        var targetBus = liveBuses.find(function (bus) {\n          return bus.lineNumber === lineNumber;\n        });\n        if (targetBus) {\n          return {\n            latitude: targetBus.latitude,\n            longitude: targetBus.longitude,\n            speed: 'Live tracking',\n            direction: 'Real-time',\n            busNumber: targetBus.busNumber,\n            tripId: targetBus.tripId\n          };\n        } else {\n          return {\n            latitude: 45.3271,\n            longitude: 14.4422,\n            speed: 'Not available',\n            direction: 'Not available'\n          };\n        }\n      } catch (error) {\n        console.error('Error fetching bus location:', error);\n        return {\n          latitude: 45.3271,\n          longitude: 14.4422,\n          speed: 'Error',\n          direction: 'Error'\n        };\n      }\n    });\n    function getBusLocation(_x3) {\n      return _getBusLocation.apply(this, arguments);\n    }\n    return getBusLocation;\n  }(),\n  getBusLines: function () {\n    var _getBusLines = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(`${API_BASE_URL}/linije`);\n        var data = yield response.json();\n        if (data.msg !== 'ok') {\n          throw new Error('API response not OK');\n        }\n        return Object.values(data.res).map(function (line) {\n          return {\n            id: line.id,\n            lineNumber: line.brojLinije,\n            name: line.naziv,\n            direction: line.smjerId,\n            directionName: line.smjerNaziv || '',\n            uniqueId: line.uniqueLinijaId || `${line.id}-${line.smjerId}-${line.varijantaId || 0}`\n          };\n        });\n      } catch (error) {\n        console.error('Error fetching bus lines:', error);\n        return [];\n      }\n    });\n    function getBusLines() {\n      return _getBusLines.apply(this, arguments);\n    }\n    return getBusLines;\n  }(),\n  getStations: function () {\n    var _getStations = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(`${API_BASE_URL}/stanice`);\n        var data = yield response.json();\n        if (data.msg !== 'ok') {\n          throw new Error('API response not OK');\n        }\n        return data.res.map(function (station) {\n          return {\n            id: station.id,\n            name: station.naziv,\n            shortName: station.nazivKratki,\n            latitude: station.gpsY,\n            longitude: station.gpsX,\n            direction: station.smjer,\n            directionId: station.smjerId\n          };\n        });\n      } catch (error) {\n        console.error('Error fetching stations:', error);\n        return [];\n      }\n    });\n    function getStations() {\n      return _getStations.apply(this, arguments);\n    }\n    return getStations;\n  }()\n};\nexport default busService;","map":{"version":3,"names":["API_BASE_URL","busService","getLiveBuses","_getLiveBuses","_asyncToGenerator","console","log","_yield$Promise$all","Promise","all","fetch","_yield$Promise$all2","_slicedToArray","linesResponse","busesResponse","departuresResponse","status","linesData","json","busesData","departuresData","msg","res","length","error","Error","linesMap","Map","Object","values","forEach","line","set","id","size","tripDepartures","Array","isArray","keys","departuresArray","departure","voznjaId","stanica","polazak","tripId","has","get","push","stationName","nazivKratki","naziv","departureTime","arrivalTime","dolazak","departures","sort","a","b","Date","busMap","bus","index","busKey","gbr","allLines","from","busHash","lineIndex","Math","abs","brojLinije","busNumber","lineNumber","lat","lon","tripDeps","now","nextDeparture","find","dep","nextStopName","timeDiff","round","toLocaleTimeString","hour","minute","voznjaBusId","route","destination","split","direction","smjerId","directionName","smjerNaziv","nextStop","latitude","longitude","liveBuses","message","stack","apply","arguments","getBusSchedule","_getBusSchedule","_yield$Promise$all3","_yield$Promise$all4","lineNumberToIds","targetLineIds","slice","map","key","_objectSpread","departureKey","JSON","stringify","d","linijaId","filteredDepartures","filter","includes","some","lineId","startsWith","toString","uniqueLinijaId","departureLine","linija","timeA","timeB","localeCompare","rideGroups","allDepartures","departureGroup","polazakList","rideId","busId","scheduleData","_departure$stanica","stanicaId","timeMatch","match","stationDescription","rawName","replace","trim","rawDescription","voznjaStanicaId","time","stop","description","arrival","stationId","uniqueLineId","coordinates","gpsY","lng","gpsX","s","currentTime","getHours","getMinutes","futureSchedules","schedule","_timeMatch2","hours","minutes","scheduleTime","parseInt","_x","getBusScheduleByRides","_getBusScheduleByRides","_yield$Promise$all5","_yield$Promise$all6","strictFilteredDepartures","filteredPolazakList","group","lineIds","_toConsumableArray","Set","p","polazakLineId","warn","stations","ride","rides","firstDeparture","lastDeparture","stationCount","title","lineVerification","isCorrectLine","verifiedRides","departureCount","sampleStops","_x2","analyzeAPIStructure","_analyzeAPIStructure","_sampleDeparture$pola","_sampleDeparture$pola2","_yield$Promise$all7","_yield$Promise$all8","repeat","sampleLine","sampleBus","sampleKey","sampleDeparture","polazakListLength","_samplePolazak$stanic","samplePolazak","lines","buses","departureGroups","sampleStructures","getBusLocation","_getBusLocation","targetBus","speed","_x3","getBusLines","_getBusLines","response","data","name","uniqueId","varijantaId","getStations","_getStations","station","shortName","smjer","directionId"],"sources":["/Users/alen/Develop/bus-schedule-app/Autotrolej/src/services/busService.js"],"sourcesContent":["// Real Autotrolej API service for Rijeka bus tracking\nconst API_BASE_URL = 'https://api.autotrolej.hr/api/open/v1/voznired';\n\nconst busService = {\n\t// Get live buses data from Autotrolej API\n\tgetLiveBuses: async () => {\n\t\ttry {\n\t\t\tconsole.log('BusService: Starting getLiveBuses...');\n\t\t\t\n\t\t\t// Fetch bus lines, live bus locations, and departures data\n\t\t\tconst [linesResponse, busesResponse, departuresResponse] = await Promise.all([\n\t\t\t\tfetch(`${API_BASE_URL}/linije`),\n\t\t\t\tfetch(`${API_BASE_URL}/autobusi`),\n\t\t\t\tfetch(`${API_BASE_URL}/polasci`)\n\t\t\t]);\n\n\t\t\tconsole.log('BusService: API responses received');\n\t\t\tconsole.log('Lines response status:', linesResponse.status);\n\t\t\tconsole.log('Buses response status:', busesResponse.status);\n\t\t\tconsole.log('Departures response status:', departuresResponse.status);\n\n\t\t\tconst linesData = await linesResponse.json();\n\t\t\tconst busesData = await busesResponse.json();\n\t\t\tconst departuresData = await departuresResponse.json();\n\n\t\t\tconsole.log('BusService: Data parsed');\n\t\t\tconsole.log('Lines data msg:', linesData.msg);\n\t\t\tconsole.log('Buses data msg:', busesData.msg);\n\t\t\tconsole.log('Departures data msg:', departuresData.msg);\n\t\t\tconsole.log('Number of buses from API:', busesData.res ? busesData.res.length : 0);\n\n\t\t\tif (linesData.msg !== 'ok' || busesData.msg !== 'ok') {\n\t\t\t\tconsole.error('API response not OK:', { linesData: linesData.msg, busesData: busesData.msg });\n\t\t\t\tthrow new Error('API response not OK');\n\t\t\t}\n\n\t\t\t// Transform lines data into a map for easy lookup\n\t\t\tconst linesMap = new Map();\n\t\t\tObject.values(linesData.res).forEach(line => {\n\t\t\t\tlinesMap.set(line.id, line);\n\t\t\t});\n\t\t\tconsole.log('BusService: Lines map created with', linesMap.size, 'lines');\n\n\t\t\t// Create a map of trip IDs to upcoming departures (only if departures data is OK)\n\t\t\tconst tripDepartures = new Map();\n\t\t\tif (departuresData.msg === 'ok' && departuresData.res) {\n\t\t\t\tconsole.log('BusService: Departures data type:', typeof departuresData.res);\n\t\t\t\tconsole.log('BusService: Departures data is array:', Array.isArray(departuresData.res));\n\t\t\t\tconsole.log('BusService: Departures data structure:', Object.keys(departuresData.res));\n\t\t\t\t\n\t\t\t\t// Check if res is an array or object\n\t\t\t\tconst departuresArray = Array.isArray(departuresData.res) \n\t\t\t\t\t? departuresData.res \n\t\t\t\t\t: Object.values(departuresData.res);\n\t\t\t\t\n\t\t\t\tconsole.log('BusService: Processing', departuresArray.length, 'departures');\n\t\t\t\t\n\t\t\t\tdeparturesArray.forEach(departure => {\n\t\t\t\t\tif (departure.voznjaId && departure.stanica && departure.polazak) {\n\t\t\t\t\t\tconst tripId = departure.voznjaId;\n\t\t\t\t\t\tif (!tripDepartures.has(tripId)) {\n\t\t\t\t\t\t\ttripDepartures.set(tripId, []);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttripDepartures.get(tripId).push({\n\t\t\t\t\t\t\tstationName: departure.stanica.nazivKratki || departure.stanica.naziv,\n\t\t\t\t\t\t\tdepartureTime: departure.polazak,\n\t\t\t\t\t\t\tarrivalTime: departure.dolazak\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tconsole.log('BusService: Trip departures map created with', tripDepartures.size, 'trips');\n\n\t\t\t// Sort departures by time for each trip\n\t\t\ttripDepartures.forEach((departures, tripId) => {\n\t\t\t\tdepartures.sort((a, b) => new Date(a.departureTime) - new Date(b.departureTime));\n\t\t\t});\n\n\t\t\t// Group buses by their unique properties to avoid duplicates\n\t\t\tconst busMap = new Map();\n\t\t\t\n\t\t\t// Transform live buses data to match our app structure\n\t\t\tconsole.log('BusService: Processing', busesData.res.length, 'buses');\n\t\t\tbusesData.res.forEach((bus, index) => {\n\t\t\t\t// Use bus number as unique identifier to avoid duplicates\n\t\t\t\tconst busKey = `${bus.gbr}-${bus.voznjaId}`;\n\t\t\t\t\n\t\t\t\tif (!busMap.has(busKey)) {\n\t\t\t\t\t// Try to find the actual line this bus belongs to\n\t\t\t\t\t// Since we don't have a direct relation, we'll create a more realistic distribution\n\t\t\t\t\tconst allLines = Array.from(linesMap.values());\n\t\t\t\t\t\n\t\t\t\t\t// Use a hash-based approach for consistent line assignment\n\t\t\t\t\tconst busHash = bus.gbr * 31 + (bus.voznjaId % 1000);\n\t\t\t\t\tconst lineIndex = Math.abs(busHash) % allLines.length;\n\t\t\t\t\tconst line = allLines[lineIndex] || { brojLinije: 'Unknown', naziv: 'Unknown Route' };\n\n\t\t\t\t\tif (index < 3) { // Log first few buses for debugging\n\t\t\t\t\t\tconsole.log(`BusService: Processing bus ${index}:`, {\n\t\t\t\t\t\t\tbusKey,\n\t\t\t\t\t\t\tbusNumber: bus.gbr,\n\t\t\t\t\t\t\ttripId: bus.voznjaId,\n\t\t\t\t\t\t\tlineNumber: line.brojLinije,\n\t\t\t\t\t\t\tlat: bus.lat,\n\t\t\t\t\t\t\tlon: bus.lon\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get next stop information from departures data\n\t\t\t\t\tconst tripDeps = tripDepartures.get(bus.voznjaId) || [];\n\t\t\t\t\tconst now = new Date();\n\t\t\t\t\tconst nextDeparture = tripDeps.find(dep => new Date(dep.departureTime) > now);\n\t\t\t\t\t\n\t\t\t\t\t// Calculate arrival time for next stop\n\t\t\t\t\tlet arrivalTime = 'Live';\n\t\t\t\t\tlet nextStopName = 'En route';\n\t\t\t\t\t\n\t\t\t\t\tif (nextDeparture) {\n\t\t\t\t\t\tnextStopName = nextDeparture.stationName;\n\t\t\t\t\t\tconst departureTime = new Date(nextDeparture.departureTime);\n\t\t\t\t\t\tconst timeDiff = Math.round((departureTime - now) / (1000 * 60)); // minutes\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (timeDiff > 0 && timeDiff < 60) {\n\t\t\t\t\t\t\tarrivalTime = `${timeDiff} min`;\n\t\t\t\t\t\t} else if (timeDiff <= 0) {\n\t\t\t\t\t\t\tarrivalTime = 'Now';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tarrivalTime = departureTime.toLocaleTimeString('hr-HR', { \n\t\t\t\t\t\t\t\thour: '2-digit', \n\t\t\t\t\t\t\t\tminute: '2-digit' \n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbusMap.set(busKey, {\n\t\t\t\t\t\tid: bus.voznjaBusId || bus.gbr,\n\t\t\t\t\t\tlineNumber: line.brojLinije,\n\t\t\t\t\t\troute: line.naziv,\n\t\t\t\t\t\tdestination: line.naziv.split(' - ')[1] || line.naziv,\n\t\t\t\t\t\tdirection: line.smjerId, // Direction ID\n\t\t\t\t\t\tdirectionName: line.smjerNaziv || '', // Direction name  \n\t\t\t\t\t\tstatus: 'Live', // All live buses are considered active\n\t\t\t\t\t\tnextStop: nextStopName,\n\t\t\t\t\t\tarrivalTime: arrivalTime,\n\t\t\t\t\t\tlatitude: bus.lat,\n\t\t\t\t\t\tlongitude: bus.lon,\n\t\t\t\t\t\tbusNumber: bus.gbr,\n\t\t\t\t\t\ttripId: bus.voznjaId\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst liveBuses = Array.from(busMap.values());\n\t\t\tconsole.log('BusService: Final live buses count:', liveBuses.length);\n\t\t\tconsole.log('BusService: Sample bus data:', liveBuses[0]);\n\n\t\t\treturn liveBuses;\n\n\t\t} catch (error) {\n\t\t\tconsole.error('Error fetching live buses:', error);\n\t\t\tconsole.error('Error details:', error.message);\n\t\t\tconsole.error('Error stack:', error.stack);\n\t\t\t// Return empty array on error instead of mock data\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t// Get bus schedule/departures from Autotrolej API\n\tgetBusSchedule: async (lineNumber) => {\n\t\ttry {\n\t\t\tconsole.log('🚌 BusService: Getting schedule for line:', lineNumber);\n\t\t\tconsole.log('🚌 BusService: Making API calls to /linije and /polasci endpoints');\n\t\t\t\n\t\t\t// Fetch both lines data and departures data\n\t\t\tconst [linesResponse, departuresResponse] = await Promise.all([\n\t\t\t\tfetch(`${API_BASE_URL}/linije`),\n\t\t\t\tfetch(`${API_BASE_URL}/polasci`)\n\t\t\t]);\n\t\t\t\n\t\t\tconst linesData = await linesResponse.json();\n\t\t\tconst departuresData = await departuresResponse.json();\n\n\t\t\tconsole.log('BusService: Schedule API response status:', departuresResponse.status);\n\t\t\tconsole.log('BusService: Schedule data msg:', departuresData.msg);\n\t\t\tconsole.log('BusService: Lines data msg:', linesData.msg);\n\n\t\t\tif (departuresData.msg !== 'ok' || linesData.msg !== 'ok') {\n\t\t\t\tthrow new Error('API response not OK');\n\t\t\t}\n\n\t\t\t// Create mapping of line numbers to line IDs\n\t\t\tconst lineNumberToIds = new Map();\n\t\t\tObject.values(linesData.res).forEach(line => {\n\t\t\t\tif (!lineNumberToIds.has(line.brojLinije)) {\n\t\t\t\t\tlineNumberToIds.set(line.brojLinije, []);\n\t\t\t\t}\n\t\t\t\tlineNumberToIds.get(line.brojLinije).push(line.id);\n\t\t\t});\n\n\t\t\tconst targetLineIds = lineNumberToIds.get(lineNumber) || [];\n\t\t\tconsole.log('BusService: Available line numbers:', Array.from(lineNumberToIds.keys()).slice(0, 10));\n\t\t\tconsole.log('BusService: Target line IDs for line', lineNumber, ':', targetLineIds);\n\n\t\t\t// Convert departures data to array if it's an object\n\t\t\tlet departuresArray;\n\t\t\tif (Array.isArray(departuresData.res)) {\n\t\t\t\tdeparturesArray = departuresData.res;\n\t\t\t} else {\n\t\t\t\t// If it's an object, get the actual departure objects, not just the keys\n\t\t\t\tdeparturesArray = Object.keys(departuresData.res).map(key => {\n\t\t\t\t\tconst departure = departuresData.res[key];\n\t\t\t\t\t// The key might contain useful information, let's parse it\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...departure,\n\t\t\t\t\t\tdepartureKey: key // Keep the original key for reference\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconsole.log('BusService: Total departures available:', departuresArray.length);\n\t\t\tconsole.log('BusService: Sample departure structure:', JSON.stringify(departuresArray[0], null, 2));\n\t\t\tconsole.log('BusService: Sample departure line IDs:', departuresArray.slice(0, 5).map(d => d.linijaId));\n\t\t\tconsole.log('BusService: Sample departure keys:', Object.keys(departuresData.res).slice(0, 5));\n\n\t\t\t// Try multiple filtering approaches\n\t\t\tlet filteredDepartures = [];\n\t\t\t\n\t\t\t// First try exact line ID match\n\t\t\tif (targetLineIds.length > 0) {\n\t\t\t\tfilteredDepartures = departuresArray.filter(departure => \n\t\t\t\t\ttargetLineIds.includes(departure.linijaId)\n\t\t\t\t);\n\t\t\t\tconsole.log('BusService: Exact line ID match found:', filteredDepartures.length, 'departures');\n\t\t\t}\n\t\t\t\n\t\t\t// If no exact match, try matching based on departure keys (like '2194-2-2' where 2194 might be line ID)\n\t\t\tif (filteredDepartures.length === 0) {\n\t\t\t\tfilteredDepartures = departuresArray.filter(departure => {\n\t\t\t\t\tif (!departure.departureKey) return false;\n\t\t\t\t\t// Check if any target line ID appears at the start of the departure key\n\t\t\t\t\treturn targetLineIds.some(lineId => \n\t\t\t\t\t\tdeparture.departureKey.startsWith(lineId.toString())\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tconsole.log('BusService: Departure key match found:', filteredDepartures.length, 'departures');\n\t\t\t}\n\t\t\t\n\t\t\t// If no exact match, try partial string matching with line number in departure key\n\t\t\tif (filteredDepartures.length === 0) {\n\t\t\t\tfilteredDepartures = departuresArray.filter(departure => \n\t\t\t\t\tdeparture.departureKey && departure.departureKey.includes(lineNumber)\n\t\t\t\t);\n\t\t\t\tconsole.log('BusService: Partial departure key match found:', filteredDepartures.length, 'departures');\n\t\t\t}\n\t\t\t\n\t\t\t// If no exact match, try partial string matching with uniqueLinijaId\n\t\t\tif (filteredDepartures.length === 0) {\n\t\t\t\tfilteredDepartures = departuresArray.filter(departure => \n\t\t\t\t\tdeparture.uniqueLinijaId && departure.uniqueLinijaId.includes(lineNumber)\n\t\t\t\t);\n\t\t\t\tconsole.log('BusService: Partial uniqueLinijaId match found:', filteredDepartures.length, 'departures');\n\t\t\t}\n\t\t\t\n\t\t\t// If still no match, try looking at the actual line data in departure\n\t\t\tif (filteredDepartures.length === 0) {\n\t\t\t\tfilteredDepartures = departuresArray.filter(departure => {\n\t\t\t\t\t// Check if any line references match our line number\n\t\t\t\t\tconst departureLine = departure.linija || departure.linijaId;\n\t\t\t\t\treturn departureLine && departureLine.toString().includes(lineNumber);\n\t\t\t\t});\n\t\t\t\tconsole.log('BusService: General line reference match found:', filteredDepartures.length, 'departures');\n\t\t\t}\n\t\t\t\n\t\t\t// As a last resort, show some sample data for debugging\n\t\t\tif (filteredDepartures.length === 0) {\n\t\t\t\tconsole.log('BusService: No matches found. Taking first 10 departures for debugging...');\n\t\t\t\tfilteredDepartures = departuresArray.slice(0, 10);\n\t\t\t}\n\n\t\t\t// Sort departures by time (polazak - departure time)\n\t\t\tfilteredDepartures.sort((a, b) => {\n\t\t\t\tconst timeA = a.polazak || '';\n\t\t\t\tconst timeB = b.polazak || '';\n\t\t\t\treturn timeA.localeCompare(timeB);\n\t\t\t});\n\n\t\t\t// Extract individual departures from polazakList arrays and group by rides (voznjaId)\n\t\t\tconst rideGroups = new Map(); // Map of voznjaId -> ride info\n\t\t\tconst allDepartures = [];\n\t\t\t\n\t\t\tfilteredDepartures.forEach(departureGroup => {\n\t\t\t\tif (departureGroup.polazakList && Array.isArray(departureGroup.polazakList)) {\n\t\t\t\t\tdepartureGroup.polazakList.forEach(departure => {\n\t\t\t\t\t\t// Group by ride (voznjaId)\n\t\t\t\t\t\tconst rideId = departure.voznjaId;\n\t\t\t\t\t\tconst busId = departure.voznjaBusId;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!rideGroups.has(rideId)) {\n\t\t\t\t\t\t\trideGroups.set(rideId, {\n\t\t\t\t\t\t\t\trideId: rideId,\n\t\t\t\t\t\t\t\tbusId: busId,\n\t\t\t\t\t\t\t\tlineNumber: lineNumber,\n\t\t\t\t\t\t\t\tdepartures: []\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\trideGroups.get(rideId).departures.push(departure);\n\t\t\t\t\t\tallDepartures.push({\n\t\t\t\t\t\t\t...departure,\n\t\t\t\t\t\t\trideId: rideId,\n\t\t\t\t\t\t\tbusId: busId\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconsole.log('BusService: Found', rideGroups.size, 'different rides for line', lineNumber);\n\t\t\tconsole.log('BusService: Ride IDs:', Array.from(rideGroups.keys()).slice(0, 10));\n\t\t\tconsole.log('BusService: Extracted', allDepartures.length, 'individual departures from', filteredDepartures.length, 'departure groups');\n\n\t\t\t// Sort all departures by departure time\n\t\t\tallDepartures.sort((a, b) => {\n\t\t\t\tconst timeA = a.polazak || '';\n\t\t\t\tconst timeB = b.polazak || '';\n\t\t\t\treturn timeA.localeCompare(timeB);\n\t\t\t});\n\n\t\t\t// Process the extracted departures data\n\t\t\tconst scheduleData = allDepartures.slice(0, 50).map((departure, index) => {\n\t\t\t// Log first few entries to understand the data structure\n\t\t\tif (allDepartures.length > 0 && index < 3) {\n\t\t\t\tconsole.log(`BusService: Individual departure ${index} for line ${lineNumber}:`, {\n\t\t\t\t\tpolazak: departure.polazak,\n\t\t\t\t\tdolazak: departure.dolazak,\n\t\t\t\t\tstanica: departure.stanica?.naziv,\n\t\t\t\t\tlinijaId: departure.linijaId,\n\t\t\t\t\tuniqueLinijaId: departure.uniqueLinijaId,\n\t\t\t\t\tstanicaId: departure.stanicaId\n\t\t\t\t});\n\t\t\t}\t\t\t\t// Extract departure time\n\t\t\t\tlet departureTime = 'N/A';\n\t\t\t\tif (departure.polazak) {\n\t\t\t\t\t// Parse ISO datetime format: \"2025-09-13T06:53:00\"\n\t\t\t\t\tconst timeMatch = departure.polazak.match(/T(\\d{2}:\\d{2})/);\n\t\t\t\t\tif (timeMatch) {\n\t\t\t\t\t\tdepartureTime = timeMatch[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Extract arrival time\n\t\t\t\tlet arrivalTime = null;\n\t\t\t\tif (departure.dolazak) {\n\t\t\t\t\tconst timeMatch = departure.dolazak.match(/T(\\d{2}:\\d{2})/);\n\t\t\t\t\tif (timeMatch) {\n\t\t\t\t\t\tarrivalTime = timeMatch[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Extract station information\n\t\t\t\tlet stationName = 'Unknown Stop';\n\t\t\t\tlet stationDescription = '';\n\t\t\t\t\n\t\t\t\tif (departure.stanica) {\n\t\t\t\t\t// Clean up Croatian station names by removing extra whitespace and newlines\n\t\t\t\t\tconst rawName = departure.stanica.naziv || 'Unknown Stop';\n\t\t\t\t\tstationName = rawName.toString().replace(/\\s+/g, ' ').trim();\n\t\t\t\t\t\n\t\t\t\t\tconst rawDescription = departure.stanica.nazivKratki || departure.stanica.naziv || '';\n\t\t\t\t\tstationDescription = rawDescription.toString().replace(/\\s+/g, ' ').trim();\n\t\t\t\t\t\n\t\t\t\t\t// Log the station data for debugging\n\t\t\t\t\tif (allDepartures.length > 0 && index < 3) {\n\t\t\t\t\t\tconsole.log(`Station ${index} for line ${lineNumber} - Raw:`, departure.stanica.naziv, '-> Cleaned:', stationName);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tid: departure.voznjaStanicaId || departure.stanicaId || `dep-${index}`,\n\t\t\t\t\ttime: departureTime,\n\t\t\t\t\tstop: stationName,\n\t\t\t\t\tdescription: stationDescription,\n\t\t\t\t\tarrival: arrivalTime,\n\t\t\t\t\tstationId: departure.stanicaId,\n\t\t\t\t\ttripId: departure.voznjaId,\n\t\t\t\t\trideId: departure.rideId, // Group identifier\n\t\t\t\t\tbusId: departure.busId, // Bus assigned to this ride\n\t\t\t\t\tlineId: departure.linijaId,\n\t\t\t\t\tuniqueLineId: departure.uniqueLinijaId,\n\t\t\t\t\tcoordinates: departure.stanica ? {\n\t\t\t\t\t\tlat: departure.stanica.gpsY,\n\t\t\t\t\t\tlng: departure.stanica.gpsX\n\t\t\t\t\t} : null\n\t\t\t\t};\n\t\t\t}); // Process filtered departures for specific line\n\n\t\t\t// For debugging, let's temporarily show all schedules without time filtering\n\t\t\tconsole.log('BusService: Total processed schedules before time filtering:', scheduleData.length);\n\t\t\tconsole.log('BusService: Sample schedule times (all):', scheduleData.slice(0, 10).map(s => `${s.time} - ${s.stop}`));\n\t\t\t\n\t\t\t// Filter to show only future departures (not past ones) - but more lenient for debugging\n\t\t\tconst now = new Date();\n\t\t\tconst currentTime = now.getHours() * 60 + now.getMinutes(); // Convert to minutes since midnight\n\t\t\t\n\t\t\tlet futureSchedules = scheduleData.filter(schedule => {\n\t\t\t\tif (schedule.time === 'N/A') return true; // Keep N/A times for now\n\t\t\t\t\n\t\t\t\tconst timeMatch = schedule.time.match(/(\\d{1,2}):(\\d{2})/);\n\t\t\t\tif (!timeMatch) return true; // Keep invalid times for debugging\n\t\t\t\t\n\t\t\t\tconst [, hours, minutes] = timeMatch;\n\t\t\t\tconst scheduleTime = parseInt(hours) * 60 + parseInt(minutes);\n\t\t\t\t\n\t\t\t\t// For debugging, show schedules within a broader time window\n\t\t\t\treturn true; // Temporarily show all schedules\n\t\t\t});\n\t\t\t\n\t\t\t// If no future schedules, just return the first batch for debugging\n\t\t\tif (futureSchedules.length === 0) {\n\t\t\t\tconsole.log('BusService: No future schedules found, returning all processed schedules for debugging');\n\t\t\t\tfutureSchedules = scheduleData;\n\t\t\t}\n\n\t\t\tconsole.log('BusService: Returning', futureSchedules.length, 'schedule entries for line', lineNumber);\n\t\t\tif (futureSchedules.length > 0) {\n\t\t\t\tconsole.log('BusService: Sample schedule entry:', futureSchedules[0]);\n\t\t\t\tconsole.log('BusService: Sample schedule times:', futureSchedules.slice(0, 5).map(s => `${s.time} - ${s.stop}`));\n\t\t\t\tconsole.log('BusService: Schedule stops for line', lineNumber, ':', futureSchedules.slice(0, 10).map(s => s.stop));\n\t\t\t} else {\n\t\t\t\t// If still no data, return some mock data for debugging\n\t\t\t\tconsole.log('BusService: No schedule data found, returning mock data for debugging');\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'mock-1',\n\t\t\t\t\t\ttime: '14:30',\n\t\t\t\t\t\tstop: 'Test Station 1',\n\t\t\t\t\t\tdescription: 'Mock departure 1',\n\t\t\t\t\t\tarrival: null,\n\t\t\t\t\t\tstationId: 'mock-station-1',\n\t\t\t\t\t\ttripId: 'mock-trip-1',\n\t\t\t\t\t\tlineId: lineNumber,\n\t\t\t\t\t\tuniqueLineId: `mock-${lineNumber}`,\n\t\t\t\t\t\tcoordinates: null\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'mock-2',\n\t\t\t\t\t\ttime: '15:00',\n\t\t\t\t\t\tstop: 'Test Station 2',\n\t\t\t\t\t\tdescription: 'Mock departure 2',\n\t\t\t\t\t\tarrival: null,\n\t\t\t\t\t\tstationId: 'mock-station-2',\n\t\t\t\t\t\ttripId: 'mock-trip-2',\n\t\t\t\t\t\tlineId: lineNumber,\n\t\t\t\t\t\tuniqueLineId: `mock-${lineNumber}`,\n\t\t\t\t\t\tcoordinates: null\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t\treturn futureSchedules;\n\n\t\t} catch (error) {\n\t\t\tconsole.error('Error fetching bus schedule:', error);\n\t\t\tconsole.error('Error details:', error.message);\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t// Get bus schedule grouped by rides (voznjaId) for better organization\n\tgetBusScheduleByRides: async (lineNumber) => {\n\t\ttry {\n\t\t\tconsole.log('🚌 BusService: Getting schedule by rides for line:', lineNumber);\n\t\t\t\n\t\t\t// Get fresh departure data directly from API\n\t\t\tconst [linesResponse, departuresResponse] = await Promise.all([\n\t\t\t\tfetch(`${API_BASE_URL}/linije`),\n\t\t\t\tfetch(`${API_BASE_URL}/polasci`)\n\t\t\t]);\n\t\t\t\n\t\t\tconst linesData = await linesResponse.json();\n\t\t\tconst departuresData = await departuresResponse.json();\n\n\t\t\tif (departuresData.msg !== 'ok' || linesData.msg !== 'ok') {\n\t\t\t\tthrow new Error('API response not OK');\n\t\t\t}\n\n\t\t\t// Create mapping of line numbers to line IDs\n\t\t\tconst lineNumberToIds = new Map();\n\t\t\tObject.values(linesData.res).forEach(line => {\n\t\t\t\tif (!lineNumberToIds.has(line.brojLinije)) {\n\t\t\t\t\tlineNumberToIds.set(line.brojLinije, []);\n\t\t\t\t}\n\t\t\t\tlineNumberToIds.get(line.brojLinije).push(line.id);\n\t\t\t});\n\n\t\t\tconst targetLineIds = lineNumberToIds.get(lineNumber) || [];\n\t\t\tconsole.log('BusService (Rides): Target line IDs for line', lineNumber, ':', targetLineIds);\n\n\t\t\t// Convert departures data to array\n\t\t\tlet departuresArray;\n\t\t\tif (Array.isArray(departuresData.res)) {\n\t\t\t\tdeparturesArray = departuresData.res;\n\t\t\t} else {\n\t\t\t\tdeparturesArray = Object.keys(departuresData.res).map(key => ({\n\t\t\t\t\t...departuresData.res[key],\n\t\t\t\t\tdepartureKey: key\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Filter departures for our line\n\t\t\tlet filteredDepartures = [];\n\t\t\tif (targetLineIds.length > 0) {\n\t\t\t\tfilteredDepartures = departuresArray.filter(departure => \n\t\t\t\t\ttargetLineIds.includes(departure.linijaId)\n\t\t\t\t);\n\t\t\t\tconsole.log('BusService (Rides): Exact line ID match found:', filteredDepartures.length, 'departure groups');\n\t\t\t}\n\n\t\t\t// If no exact match, try matching based on departure keys (format: lineId-direction-variant)\n\t\t\tif (filteredDepartures.length === 0) {\n\t\t\t\tfilteredDepartures = departuresArray.filter(departure => {\n\t\t\t\t\tif (!departure.departureKey) return false;\n\t\t\t\t\t// Check if any target line ID appears at the start of the departure key\n\t\t\t\t\treturn targetLineIds.some(lineId => \n\t\t\t\t\t\tdeparture.departureKey.startsWith(lineId.toString() + '-')\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tconsole.log('BusService (Rides): Departure key prefix match found:', filteredDepartures.length, 'departure groups');\n\t\t\t}\n\n\t\t\t// If still no match, try filtering by line number within the polazakList data\n\t\t\tif (filteredDepartures.length === 0) {\n\t\t\t\tconsole.log('BusService (Rides): No direct matches found. Searching within polazakList data...');\n\t\t\t\t\n\t\t\t\tfilteredDepartures = departuresArray.filter(departureGroup => {\n\t\t\t\t\tif (!departureGroup.polazakList || !Array.isArray(departureGroup.polazakList)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Check if any polazak in this group belongs to our target line\n\t\t\t\t\treturn departureGroup.polazakList.some(polazak => {\n\t\t\t\t\t\treturn targetLineIds.includes(polazak.linijaId);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tconsole.log('BusService (Rides): PolazakList filtering found:', filteredDepartures.length, 'departure groups');\n\t\t\t}\n\n\t\t\t// Final filter: within each departure group, only process polazak entries that belong to our line\n\t\t\tconst strictFilteredDepartures = filteredDepartures.map(departureGroup => {\n\t\t\t\tconst filteredPolazakList = departureGroup.polazakList ? \n\t\t\t\t\tdepartureGroup.polazakList.filter(polazak => \n\t\t\t\t\t\ttargetLineIds.includes(polazak.linijaId)\n\t\t\t\t\t) : [];\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\t...departureGroup,\n\t\t\t\t\tpolazakList: filteredPolazakList\n\t\t\t\t};\n\t\t\t}).filter(group => group.polazakList.length > 0);\n\n\t\t\tconsole.log('BusService (Rides): Final filtered departure groups:', strictFilteredDepartures.length, 'for line', lineNumber);\n\n\t\t\t// Process rides from polazakList\n\t\t\tconst rideGroups = new Map();\n\t\t\t\n\t\t\tstrictFilteredDepartures.forEach(departureGroup => {\n\t\t\t\tif (departureGroup.polazakList && Array.isArray(departureGroup.polazakList)) {\n\t\t\t\t\tconsole.log('BusService (Rides): Processing polazakList with', departureGroup.polazakList.length, 'departures for line', lineNumber);\n\t\t\t\t\t\n\t\t\t\t\t// Verify we have the right line data\n\t\t\t\t\tconst lineIds = [...new Set(departureGroup.polazakList.map(p => p.linijaId))];\n\t\t\t\t\tconsole.log('BusService (Rides): Line IDs in this group:', lineIds, 'Target IDs:', targetLineIds);\n\t\t\t\t\t\n\t\t\t\t\tdepartureGroup.polazakList.forEach((polazak, index) => {\n\t\t\t\t\t\tconst rideId = polazak.voznjaId;\n\t\t\t\t\t\tconst busId = polazak.voznjaBusId;\n\t\t\t\t\t\tconst polazakLineId = polazak.linijaId;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!rideId) {\n\t\t\t\t\t\t\tconsole.warn('BusService (Rides): Missing voznjaId for polazak', index);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Double-check that this polazak belongs to our target line\n\t\t\t\t\t\tif (!targetLineIds.includes(polazakLineId)) {\n\t\t\t\t\t\t\tconsole.warn('BusService (Rides): Skipping polazak from different line. Expected:', targetLineIds, 'Got:', polazakLineId);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Initialize ride group if not exists\n\t\t\t\t\t\tif (!rideGroups.has(rideId)) {\n\t\t\t\t\t\t\trideGroups.set(rideId, {\n\t\t\t\t\t\t\t\trideId: rideId,\n\t\t\t\t\t\t\t\tbusId: busId,\n\t\t\t\t\t\t\t\tlineNumber: lineNumber,\n\t\t\t\t\t\t\t\tlineId: polazakLineId, // Store the actual line ID for verification\n\t\t\t\t\t\t\t\tdepartures: [],\n\t\t\t\t\t\t\t\tstations: []\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst ride = rideGroups.get(rideId);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Extract departure time\n\t\t\t\t\t\tlet departureTime = 'N/A';\n\t\t\t\t\t\tif (polazak.polazak) {\n\t\t\t\t\t\t\tconst timeMatch = polazak.polazak.match(/T(\\d{2}:\\d{2})/);\n\t\t\t\t\t\t\tif (timeMatch) {\n\t\t\t\t\t\t\t\tdepartureTime = timeMatch[1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Extract station name\n\t\t\t\t\t\tlet stationName = 'Unknown Stop';\n\t\t\t\t\t\tif (polazak.stanica && polazak.stanica.naziv) {\n\t\t\t\t\t\t\tstationName = polazak.stanica.naziv.toString().replace(/\\s+/g, ' ').trim();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Create departure object\n\t\t\t\t\t\tconst departure = {\n\t\t\t\t\t\t\tid: polazak.voznjaStanicaId || `${rideId}-${ride.departures.length}`,\n\t\t\t\t\t\t\ttime: departureTime,\n\t\t\t\t\t\t\tstop: stationName,\n\t\t\t\t\t\t\tstationId: polazak.stanicaId,\n\t\t\t\t\t\t\tcoordinates: polazak.stanica ? {\n\t\t\t\t\t\t\t\tlat: polazak.stanica.gpsY,\n\t\t\t\t\t\t\t\tlng: polazak.stanica.gpsX\n\t\t\t\t\t\t\t} : null,\n\t\t\t\t\t\t\trideId: rideId,\n\t\t\t\t\t\t\tbusId: busId\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tride.departures.push(departure);\n\t\t\t\t\t\tride.stations.push(stationName);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Convert to array and process each ride\n\t\t\tconst rides = Array.from(rideGroups.values()).map(ride => {\n\t\t\t\t// Sort departures by time\n\t\t\t\tride.departures.sort((a, b) => {\n\t\t\t\t\tif (a.time === 'N/A') return 1;\n\t\t\t\t\tif (b.time === 'N/A') return -1;\n\t\t\t\t\treturn a.time.localeCompare(b.time);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Calculate ride metadata\n\t\t\t\tconst firstDeparture = ride.departures.length > 0 ? ride.departures[0].time : 'N/A';\n\t\t\t\tconst lastDeparture = ride.departures.length > 0 ? ride.departures[ride.departures.length - 1].time : 'N/A';\n\t\t\t\tconst stationCount = ride.departures.length;\n\t\t\t\t\n\t\t\t\treturn {\n\t\t\t\t\trideId: ride.rideId,\n\t\t\t\t\tbusId: ride.busId,\n\t\t\t\t\tlineNumber: ride.lineNumber,\n\t\t\t\t\tlineId: ride.lineId,\n\t\t\t\t\tfirstDeparture: firstDeparture,\n\t\t\t\t\tlastDeparture: lastDeparture,\n\t\t\t\t\tstationCount: stationCount,\n\t\t\t\t\tdepartures: ride.departures,\n\t\t\t\t\ttitle: `${firstDeparture} - ${lastDeparture} (${stationCount} stops)`\n\t\t\t\t};\n\t\t\t});\n\t\t\t\n\t\t\t// Sort rides by first departure time\n\t\t\trides.sort((a, b) => {\n\t\t\t\tif (a.firstDeparture === 'N/A') return 1;\n\t\t\t\tif (b.firstDeparture === 'N/A') return -1;\n\t\t\t\treturn a.firstDeparture.localeCompare(b.firstDeparture);\n\t\t\t});\n\t\t\t\n\t\t\tconsole.log('BusService (Rides): Processed', rides.length, 'rides for line', lineNumber);\n\t\t\t\n\t\t\t// Verify all rides belong to the correct line\n\t\t\tconst lineVerification = rides.map(ride => ({\n\t\t\t\trideId: ride.rideId,\n\t\t\t\tlineId: ride.lineId,\n\t\t\t\tisCorrectLine: targetLineIds.includes(ride.lineId)\n\t\t\t}));\n\t\t\tconsole.log('BusService (Rides): Line verification:', lineVerification);\n\t\t\t\n\t\t\t// Filter out any rides that don't belong to the target line (safety check)\n\t\t\tconst verifiedRides = rides.filter(ride => targetLineIds.includes(ride.lineId));\n\t\t\t\n\t\t\tif (verifiedRides.length !== rides.length) {\n\t\t\t\tconsole.warn('BusService (Rides): Filtered out', rides.length - verifiedRides.length, 'rides from wrong lines');\n\t\t\t}\n\t\t\t\n\t\t\t// Log sample rides for debugging\n\t\t\tif (verifiedRides.length > 0) {\n\t\t\t\tconsole.log('BusService (Rides): First verified ride:', {\n\t\t\t\t\trideId: verifiedRides[0].rideId,\n\t\t\t\t\tlineId: verifiedRides[0].lineId,\n\t\t\t\t\ttitle: verifiedRides[0].title,\n\t\t\t\t\tdepartureCount: verifiedRides[0].departures.length,\n\t\t\t\t\tsampleStops: verifiedRides[0].departures.slice(0, 3).map(d => `${d.time} - ${d.stop}`)\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\treturn verifiedRides;\n\t\t\t\n\t\t} catch (error) {\n\t\t\tconsole.error('Error fetching bus schedule by rides:', error);\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t// Analyze API endpoints and data structure for debugging\n\tanalyzeAPIStructure: async () => {\n\t\ttry {\n\t\t\tconsole.log('🔍 BusService: Analyzing API structure...');\n\t\t\t\n\t\t\tconst [linesResponse, busesResponse, departuresResponse] = await Promise.all([\n\t\t\t\tfetch(`${API_BASE_URL}/linije`),\n\t\t\t\tfetch(`${API_BASE_URL}/autobusi`),\n\t\t\t\tfetch(`${API_BASE_URL}/polasci`)\n\t\t\t]);\n\t\t\t\n\t\t\tconst linesData = await linesResponse.json();\n\t\t\tconst busesData = await busesResponse.json();\n\t\t\tconst departuresData = await departuresResponse.json();\n\t\t\t\n\t\t\tconsole.log('📊 API Structure Analysis:');\n\t\t\tconsole.log('='.repeat(50));\n\t\t\t\n\t\t\t// Lines analysis\n\t\t\tconsole.log('🚍 LINES (/linije):');\n\t\t\tconsole.log('- Total lines:', Object.keys(linesData.res).length);\n\t\t\tconst sampleLine = Object.values(linesData.res)[0];\n\t\t\tconsole.log('- Sample line structure:', {\n\t\t\t\tid: sampleLine.id,\n\t\t\t\tbrojLinije: sampleLine.brojLinije,\n\t\t\t\tnaziv: sampleLine.naziv,\n\t\t\t\tsmjerId: sampleLine.smjerId,\n\t\t\t\tsmjerNaziv: sampleLine.smjerNaziv\n\t\t\t});\n\t\t\t\n\t\t\t// Buses analysis\n\t\t\tconsole.log('\\n🚌 BUSES (/autobusi):');\n\t\t\tconsole.log('- Total buses:', busesData.res.length);\n\t\t\tconst sampleBus = busesData.res[0];\n\t\t\tconsole.log('- Sample bus structure:', {\n\t\t\t\tgbr: sampleBus.gbr,\n\t\t\t\tvoznjaId: sampleBus.voznjaId,\n\t\t\t\tlat: sampleBus.lat,\n\t\t\t\tlon: sampleBus.lon\n\t\t\t});\n\t\t\t\n\t\t\t// Departures analysis\n\t\t\tconsole.log('\\n🕐 DEPARTURES (/polasci):');\n\t\t\tconsole.log('- Total departure groups:', Object.keys(departuresData.res).length);\n\t\t\tconst sampleKey = Object.keys(departuresData.res)[0];\n\t\t\tconst sampleDeparture = departuresData.res[sampleKey];\n\t\t\tconsole.log('- Sample departure key:', sampleKey);\n\t\t\tconsole.log('- Sample departure structure:', {\n\t\t\t\tid: sampleDeparture.id,\n\t\t\t\tbrojLinije: sampleDeparture.brojLinije,\n\t\t\t\tnaziv: sampleDeparture.naziv,\n\t\t\t\tpolazakListLength: sampleDeparture.polazakList?.length || 0\n\t\t\t});\n\t\t\t\n\t\t\tif (sampleDeparture.polazakList?.length > 0) {\n\t\t\t\tconst samplePolazak = sampleDeparture.polazakList[0];\n\t\t\t\tconsole.log('- Sample polazak structure:', {\n\t\t\t\t\tvoznjaId: samplePolazak.voznjaId,\n\t\t\t\t\tvoznjaBusId: samplePolazak.voznjaBusId,\n\t\t\t\t\tstanicaId: samplePolazak.stanicaId,\n\t\t\t\t\tpolazak: samplePolazak.polazak,\n\t\t\t\t\tstationName: samplePolazak.stanica?.naziv\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('='.repeat(50));\n\t\t\t\n\t\t\treturn {\n\t\t\t\tlines: Object.keys(linesData.res).length,\n\t\t\t\tbuses: busesData.res.length,\n\t\t\t\tdepartureGroups: Object.keys(departuresData.res).length,\n\t\t\t\tsampleStructures: {\n\t\t\t\t\tline: sampleLine,\n\t\t\t\t\tbus: sampleBus,\n\t\t\t\t\tdeparture: sampleDeparture\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t} catch (error) {\n\t\t\tconsole.error('Error analyzing API structure:', error);\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t// Get specific bus location (enhanced from live buses data)\n\tgetBusLocation: async (lineNumber) => {\n\t\ttry {\n\t\t\t// Get live buses and find the one matching the line number\n\t\t\tconst liveBuses = await busService.getLiveBuses();\n\t\t\tconst targetBus = liveBuses.find(bus => bus.lineNumber === lineNumber);\n\n\t\t\tif (targetBus) {\n\t\t\t\treturn {\n\t\t\t\t\tlatitude: targetBus.latitude,\n\t\t\t\t\tlongitude: targetBus.longitude,\n\t\t\t\t\tspeed: 'Live tracking',\n\t\t\t\t\tdirection: 'Real-time',\n\t\t\t\t\tbusNumber: targetBus.busNumber,\n\t\t\t\t\ttripId: targetBus.tripId\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// If no live bus found, return a default location (city center of Rijeka)\n\t\t\t\treturn {\n\t\t\t\t\tlatitude: 45.3271,\n\t\t\t\t\tlongitude: 14.4422,\n\t\t\t\t\tspeed: 'Not available',\n\t\t\t\t\tdirection: 'Not available'\n\t\t\t\t};\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.error('Error fetching bus location:', error);\n\t\t\treturn {\n\t\t\t\tlatitude: 45.3271,\n\t\t\t\tlongitude: 14.4422,\n\t\t\t\tspeed: 'Error',\n\t\t\t\tdirection: 'Error'\n\t\t\t};\n\t\t}\n\t},\n\n\t// Get all bus lines\n\tgetBusLines: async () => {\n\t\ttry {\n\t\t\tconst response = await fetch(`${API_BASE_URL}/linije`);\n\t\t\tconst data = await response.json();\n\n\t\t\tif (data.msg !== 'ok') {\n\t\t\t\tthrow new Error('API response not OK');\n\t\t\t}\n\n\t\t\treturn Object.values(data.res).map(line => ({\n\t\t\t\tid: line.id,\n\t\t\t\tlineNumber: line.brojLinije,\n\t\t\t\tname: line.naziv,\n\t\t\t\tdirection: line.smjerId,\n\t\t\t\tdirectionName: line.smjerNaziv || '',\n\t\t\t\tuniqueId: line.uniqueLinijaId || `${line.id}-${line.smjerId}-${line.varijantaId || 0}`\n\t\t\t}));\n\n\t\t} catch (error) {\n\t\t\tconsole.error('Error fetching bus lines:', error);\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t// Get stations/stops\n\tgetStations: async () => {\n\t\ttry {\n\t\t\tconst response = await fetch(`${API_BASE_URL}/stanice`);\n\t\t\tconst data = await response.json();\n\n\t\t\tif (data.msg !== 'ok') {\n\t\t\t\tthrow new Error('API response not OK');\n\t\t\t}\n\n\t\t\treturn data.res.map(station => ({\n\t\t\t\tid: station.id,\n\t\t\t\tname: station.naziv,\n\t\t\t\tshortName: station.nazivKratki,\n\t\t\t\tlatitude: station.gpsY,\n\t\t\t\tlongitude: station.gpsX,\n\t\t\t\tdirection: station.smjer,\n\t\t\t\tdirectionId: station.smjerId\n\t\t\t}));\n\n\t\t} catch (error) {\n\t\t\tconsole.error('Error fetching stations:', error);\n\t\t\treturn [];\n\t\t}\n\t}\n};\n\nexport default busService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}