{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar FAVORITES_KEY = '@bus_app_favorites';\nvar FavoritesService = function () {\n  function FavoritesService() {\n    _classCallCheck(this, FavoritesService);\n  }\n  return _createClass(FavoritesService, [{\n    key: \"getFavorites\",\n    value: function () {\n      var _getFavorites = _asyncToGenerator(function* () {\n        try {\n          var jsonValue = yield AsyncStorage.getItem(FAVORITES_KEY);\n          return jsonValue != null ? JSON.parse(jsonValue) : [];\n        } catch (error) {\n          console.error('Error loading favorites:', error);\n          return [];\n        }\n      });\n      function getFavorites() {\n        return _getFavorites.apply(this, arguments);\n      }\n      return getFavorites;\n    }()\n  }, {\n    key: \"addFavorite\",\n    value: function () {\n      var _addFavorite = _asyncToGenerator(function* (line) {\n        try {\n          var favorites = yield this.getFavorites();\n          var exists = favorites.find(function (fav) {\n            return fav.lineNumber === line.lineNumber && fav.destination === line.destination;\n          });\n          if (exists) {\n            return favorites;\n          }\n          var newFavorite = {\n            id: `${line.lineNumber}-${Date.now()}`,\n            lineNumber: line.lineNumber,\n            destination: line.destination,\n            route: line.route || 'City Route',\n            direction: line.direction,\n            directionName: line.directionName || '',\n            isFavorite: true,\n            addedAt: new Date().toISOString()\n          };\n          var updatedFavorites = [].concat(_toConsumableArray(favorites), [newFavorite]);\n          yield AsyncStorage.setItem(FAVORITES_KEY, JSON.stringify(updatedFavorites));\n          return updatedFavorites;\n        } catch (error) {\n          console.error('Error adding favorite:', error);\n          throw error;\n        }\n      });\n      function addFavorite(_x) {\n        return _addFavorite.apply(this, arguments);\n      }\n      return addFavorite;\n    }()\n  }, {\n    key: \"removeFavorite\",\n    value: function () {\n      var _removeFavorite = _asyncToGenerator(function* (lineNumber, destination) {\n        try {\n          console.log('FavoritesService: removeFavorite called with:', lineNumber, destination);\n          var favorites = yield this.getFavorites();\n          console.log('FavoritesService: Current favorites before removal:', favorites);\n          var updatedFavorites = favorites.filter(function (fav) {\n            var shouldKeep = !(fav.lineNumber === lineNumber && fav.destination === destination);\n            console.log(`FavoritesService: Checking favorite ${fav.lineNumber}-${fav.destination}, shouldKeep: ${shouldKeep}`);\n            return shouldKeep;\n          });\n          console.log('FavoritesService: Updated favorites after filter:', updatedFavorites);\n          yield AsyncStorage.setItem(FAVORITES_KEY, JSON.stringify(updatedFavorites));\n          console.log('FavoritesService: Successfully saved updated favorites to AsyncStorage');\n          return updatedFavorites;\n        } catch (error) {\n          console.error('Error removing favorite:', error);\n          throw error;\n        }\n      });\n      function removeFavorite(_x2, _x3) {\n        return _removeFavorite.apply(this, arguments);\n      }\n      return removeFavorite;\n    }()\n  }, {\n    key: \"isFavorite\",\n    value: function () {\n      var _isFavorite = _asyncToGenerator(function* (lineNumber, destination) {\n        try {\n          var favorites = yield this.getFavorites();\n          return favorites.some(function (fav) {\n            return fav.lineNumber === lineNumber && fav.destination === destination;\n          });\n        } catch (error) {\n          console.error('Error checking favorite status:', error);\n          return false;\n        }\n      });\n      function isFavorite(_x4, _x5) {\n        return _isFavorite.apply(this, arguments);\n      }\n      return isFavorite;\n    }()\n  }, {\n    key: \"clearFavorites\",\n    value: function () {\n      var _clearFavorites = _asyncToGenerator(function* () {\n        try {\n          yield AsyncStorage.removeItem(FAVORITES_KEY);\n        } catch (error) {\n          console.error('Error clearing favorites:', error);\n        }\n      });\n      function clearFavorites() {\n        return _clearFavorites.apply(this, arguments);\n      }\n      return clearFavorites;\n    }()\n  }]);\n}();\nexport default new FavoritesService();","map":{"version":3,"names":["AsyncStorage","FAVORITES_KEY","FavoritesService","_classCallCheck","_createClass","key","value","_getFavorites","_asyncToGenerator","jsonValue","getItem","JSON","parse","error","console","getFavorites","apply","arguments","_addFavorite","line","favorites","exists","find","fav","lineNumber","destination","newFavorite","id","Date","now","route","direction","directionName","isFavorite","addedAt","toISOString","updatedFavorites","concat","_toConsumableArray","setItem","stringify","addFavorite","_x","_removeFavorite","log","filter","shouldKeep","removeFavorite","_x2","_x3","_isFavorite","some","_x4","_x5","_clearFavorites","removeItem","clearFavorites"],"sources":["/Users/alen/Develop/bus-schedule-app/Autotrolej/src/services/favoritesService.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst FAVORITES_KEY = '@bus_app_favorites';\n\nclass FavoritesService {\n\t// Get all saved favorite lines\n\tasync getFavorites() {\n\t\ttry {\n\t\t\tconst jsonValue = await AsyncStorage.getItem(FAVORITES_KEY);\n\t\t\treturn jsonValue != null ? JSON.parse(jsonValue) : [];\n\t\t} catch (error) {\n\t\t\tconsole.error('Error loading favorites:', error);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t// Add a line to favorites\n\tasync addFavorite(line) {\n\t\ttry {\n\t\t\tconst favorites = await this.getFavorites();\n\t\t\t\n\t\t\t// Check if already exists\n\t\t\tconst exists = favorites.find(fav => fav.lineNumber === line.lineNumber && fav.destination === line.destination);\n\t\t\tif (exists) {\n\t\t\t\treturn favorites; // Already in favorites\n\t\t\t}\n\n\t\t\t// Add new favorite\n\t\t\tconst newFavorite = {\n\t\t\t\tid: `${line.lineNumber}-${Date.now()}`, // Unique ID\n\t\t\t\tlineNumber: line.lineNumber,\n\t\t\t\tdestination: line.destination,\n\t\t\t\troute: line.route || 'City Route',\n\t\t\t\tdirection: line.direction, // Direction ID\n\t\t\t\tdirectionName: line.directionName || '', // Direction name\n\t\t\t\tisFavorite: true,\n\t\t\t\taddedAt: new Date().toISOString(),\n\t\t\t};\n\n\t\t\tconst updatedFavorites = [...favorites, newFavorite];\n\t\t\tawait AsyncStorage.setItem(FAVORITES_KEY, JSON.stringify(updatedFavorites));\n\t\t\t\n\t\t\treturn updatedFavorites;\n\t\t} catch (error) {\n\t\t\tconsole.error('Error adding favorite:', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Remove a line from favorites\n\tasync removeFavorite(lineNumber, destination) {\n\t\ttry {\n\t\t\tconsole.log('FavoritesService: removeFavorite called with:', lineNumber, destination);\n\t\t\tconst favorites = await this.getFavorites();\n\t\t\tconsole.log('FavoritesService: Current favorites before removal:', favorites);\n\t\t\t\n\t\t\tconst updatedFavorites = favorites.filter(\n\t\t\t\tfav => {\n\t\t\t\t\tconst shouldKeep = !(fav.lineNumber === lineNumber && fav.destination === destination);\n\t\t\t\t\tconsole.log(`FavoritesService: Checking favorite ${fav.lineNumber}-${fav.destination}, shouldKeep: ${shouldKeep}`);\n\t\t\t\t\treturn shouldKeep;\n\t\t\t\t}\n\t\t\t);\n\t\t\t\n\t\t\tconsole.log('FavoritesService: Updated favorites after filter:', updatedFavorites);\n\t\t\t\n\t\t\tawait AsyncStorage.setItem(FAVORITES_KEY, JSON.stringify(updatedFavorites));\n\t\t\tconsole.log('FavoritesService: Successfully saved updated favorites to AsyncStorage');\n\t\t\t\n\t\t\treturn updatedFavorites;\n\t\t} catch (error) {\n\t\t\tconsole.error('Error removing favorite:', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Check if a line is in favorites\n\tasync isFavorite(lineNumber, destination) {\n\t\ttry {\n\t\t\tconst favorites = await this.getFavorites();\n\t\t\treturn favorites.some(fav => fav.lineNumber === lineNumber && fav.destination === destination);\n\t\t} catch (error) {\n\t\t\tconsole.error('Error checking favorite status:', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Clear all favorites (for testing/reset)\n\tasync clearFavorites() {\n\t\ttry {\n\t\t\tawait AsyncStorage.removeItem(FAVORITES_KEY);\n\t\t} catch (error) {\n\t\t\tconsole.error('Error clearing favorites:', error);\n\t\t}\n\t}\n}\n\nexport default new FavoritesService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}